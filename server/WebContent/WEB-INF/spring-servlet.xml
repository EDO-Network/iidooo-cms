<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

	<!-- 自动扫描该命名空间下的类，进行自动装配 -->
	<context:component-scan base-package="com.iidooo.core.*,com.iidooo.cms.*"></context:component-scan>

	<!-- 提供MVC所有的注解驱动功能 -->
	<mvc:annotation-driven />

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!--1024*10000即10M -->
		<property name="maxUploadSize" value="10240000" />
		<!--resolveLazily属性启用是为了推迟文件解析，以便在UploadAction 中捕获文件大小异常 -->
		<property name="resolveLazily" value="true" />
	</bean>

	<!-- 建立一个服务于静态资源的处理器，处理对静态资源的请求 -->
	<!-- mapping="/resources/**" 表明路径必须以/resources开始 -->
	<!-- location="/resources/" 表明要提供服务的文件位置 -->
	<mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>

	<!-- 配置数据源 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:mybatis/jdbc-localhost.properties</value>
		</property>
	</bean>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName">
			<value>${mysql.driverClassName}</value>
		</property>
		<property name="url">
			<value>${mysql.url}</value>
		</property>
		<property name="username">
			<value>${mysql.username}</value>
		</property>
		<property name="password">
			<value>${mysql.password}</value>
		</property>
	</bean>

	<!-- 加入声明式事物处理，抛出异常自动回滚 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动配置别名 -->
		<property name="typeAliasesPackage" value="com.iidooo.core.model.po com.iidooo.cms.model.po" />
	</bean>

	<!-- Mapper接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.iidooo.core.mapper com.iidooo.cms.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!--配置拦截器, 多个拦截器,顺序执行 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/" />
			<mvc:mapping path="/**" />
			<bean class="com.iidooo.core.interceptor.CrossDomainInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 拦截所有的Controller -->
			<mvc:mapping path="/" />
			<mvc:mapping path="/**" />
			<!-- 不拦截的静态资源url -->
			<mvc:exclude-mapping path="/resources/**" />
			<mvc:exclude-mapping path="/content/**" />
			<bean class="com.iidooo.core.interceptor.AccessInterceptor"></bean>
		</mvc:interceptor>
		<!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
	</mvc:interceptors>
</beans>
